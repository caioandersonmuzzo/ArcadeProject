//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputMap/InputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMap"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""04b01cf6-97e9-48ee-822b-96daffe2bc00"",
            ""actions"": [
                {
                    ""name"": ""Direcao"",
                    ""type"": ""Value"",
                    ""id"": ""7958d015-2b0f-403a-90e6-d19e52f26008"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Acelerar"",
                    ""type"": ""Button"",
                    ""id"": ""48315098-30ae-46ed-b3a0-22fc49291f14"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Frear"",
                    ""type"": ""Value"",
                    ""id"": ""da24fc84-6b80-4ff2-91f1-12c617c21c64"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Derrapar"",
                    ""type"": ""Value"",
                    ""id"": ""35454537-c296-4df5-9cb2-648f7c41bf15"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Acao"",
                    ""type"": ""Button"",
                    ""id"": ""c5e7fef5-edb0-4889-9bfd-b45b3dc7dba7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f947e53f-2031-49b5-aa9d-0a3120c9d404"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acelerar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fcd42e0b-3608-437a-a2ea-a5ddfc811d7d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Frear"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a912c7e-fae6-4f49-bf59-7135895adf5a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Derrapar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""5ba48360-01af-46da-a22d-c693759c9673"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direcao"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fb42d484-4db3-412b-9f1b-41f6ecd16e53"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direcao"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8c04d058-c419-4ff6-8272-b41678d91466"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direcao"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""14b59cee-20b3-49ab-9319-78d19d7f11e7"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acao"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Teste"",
            ""id"": ""3628ec73-e183-4146-9c1d-69d8c46f0ac5"",
            ""actions"": [
                {
                    ""name"": ""Teste"",
                    ""type"": ""Value"",
                    ""id"": ""528f285a-5ac8-46ec-b08b-d64a2e8a967e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""144fd236-5827-4953-ad37-cbd314a3dc8a"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teste"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""18f2b917-1d59-4c03-bba5-3969117c2879"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""d52c7ba2-882d-4f15-a9d2-9a84cbd94e3c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Iniciar"",
                    ""type"": ""Button"",
                    ""id"": ""46453dfd-42e5-45e7-9e87-a60c2e165652"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""58656d07-c6fd-4665-b33c-305c680275de"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6e38563-7fb0-474a-aaaf-b6359e344a63"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Iniciar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Direcao = m_Player.FindAction("Direcao", throwIfNotFound: true);
        m_Player_Acelerar = m_Player.FindAction("Acelerar", throwIfNotFound: true);
        m_Player_Frear = m_Player.FindAction("Frear", throwIfNotFound: true);
        m_Player_Derrapar = m_Player.FindAction("Derrapar", throwIfNotFound: true);
        m_Player_Acao = m_Player.FindAction("Acao", throwIfNotFound: true);
        // Teste
        m_Teste = asset.FindActionMap("Teste", throwIfNotFound: true);
        m_Teste_Teste = m_Teste.FindAction("Teste", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Pause = m_UI.FindAction("Pause", throwIfNotFound: true);
        m_UI_Iniciar = m_UI.FindAction("Iniciar", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Direcao;
    private readonly InputAction m_Player_Acelerar;
    private readonly InputAction m_Player_Frear;
    private readonly InputAction m_Player_Derrapar;
    private readonly InputAction m_Player_Acao;
    public struct PlayerActions
    {
        private @InputMap m_Wrapper;
        public PlayerActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Direcao => m_Wrapper.m_Player_Direcao;
        public InputAction @Acelerar => m_Wrapper.m_Player_Acelerar;
        public InputAction @Frear => m_Wrapper.m_Player_Frear;
        public InputAction @Derrapar => m_Wrapper.m_Player_Derrapar;
        public InputAction @Acao => m_Wrapper.m_Player_Acao;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Direcao.started += instance.OnDirecao;
            @Direcao.performed += instance.OnDirecao;
            @Direcao.canceled += instance.OnDirecao;
            @Acelerar.started += instance.OnAcelerar;
            @Acelerar.performed += instance.OnAcelerar;
            @Acelerar.canceled += instance.OnAcelerar;
            @Frear.started += instance.OnFrear;
            @Frear.performed += instance.OnFrear;
            @Frear.canceled += instance.OnFrear;
            @Derrapar.started += instance.OnDerrapar;
            @Derrapar.performed += instance.OnDerrapar;
            @Derrapar.canceled += instance.OnDerrapar;
            @Acao.started += instance.OnAcao;
            @Acao.performed += instance.OnAcao;
            @Acao.canceled += instance.OnAcao;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Direcao.started -= instance.OnDirecao;
            @Direcao.performed -= instance.OnDirecao;
            @Direcao.canceled -= instance.OnDirecao;
            @Acelerar.started -= instance.OnAcelerar;
            @Acelerar.performed -= instance.OnAcelerar;
            @Acelerar.canceled -= instance.OnAcelerar;
            @Frear.started -= instance.OnFrear;
            @Frear.performed -= instance.OnFrear;
            @Frear.canceled -= instance.OnFrear;
            @Derrapar.started -= instance.OnDerrapar;
            @Derrapar.performed -= instance.OnDerrapar;
            @Derrapar.canceled -= instance.OnDerrapar;
            @Acao.started -= instance.OnAcao;
            @Acao.performed -= instance.OnAcao;
            @Acao.canceled -= instance.OnAcao;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Teste
    private readonly InputActionMap m_Teste;
    private List<ITesteActions> m_TesteActionsCallbackInterfaces = new List<ITesteActions>();
    private readonly InputAction m_Teste_Teste;
    public struct TesteActions
    {
        private @InputMap m_Wrapper;
        public TesteActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Teste => m_Wrapper.m_Teste_Teste;
        public InputActionMap Get() { return m_Wrapper.m_Teste; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TesteActions set) { return set.Get(); }
        public void AddCallbacks(ITesteActions instance)
        {
            if (instance == null || m_Wrapper.m_TesteActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TesteActionsCallbackInterfaces.Add(instance);
            @Teste.started += instance.OnTeste;
            @Teste.performed += instance.OnTeste;
            @Teste.canceled += instance.OnTeste;
        }

        private void UnregisterCallbacks(ITesteActions instance)
        {
            @Teste.started -= instance.OnTeste;
            @Teste.performed -= instance.OnTeste;
            @Teste.canceled -= instance.OnTeste;
        }

        public void RemoveCallbacks(ITesteActions instance)
        {
            if (m_Wrapper.m_TesteActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITesteActions instance)
        {
            foreach (var item in m_Wrapper.m_TesteActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TesteActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TesteActions @Teste => new TesteActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Pause;
    private readonly InputAction m_UI_Iniciar;
    public struct UIActions
    {
        private @InputMap m_Wrapper;
        public UIActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_UI_Pause;
        public InputAction @Iniciar => m_Wrapper.m_UI_Iniciar;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Iniciar.started += instance.OnIniciar;
            @Iniciar.performed += instance.OnIniciar;
            @Iniciar.canceled += instance.OnIniciar;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Iniciar.started -= instance.OnIniciar;
            @Iniciar.performed -= instance.OnIniciar;
            @Iniciar.canceled -= instance.OnIniciar;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IPlayerActions
    {
        void OnDirecao(InputAction.CallbackContext context);
        void OnAcelerar(InputAction.CallbackContext context);
        void OnFrear(InputAction.CallbackContext context);
        void OnDerrapar(InputAction.CallbackContext context);
        void OnAcao(InputAction.CallbackContext context);
    }
    public interface ITesteActions
    {
        void OnTeste(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnPause(InputAction.CallbackContext context);
        void OnIniciar(InputAction.CallbackContext context);
    }
}
